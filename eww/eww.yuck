(defwindow bar 
    :monitor 2 ; Can be either a number (X11 and Wayland) or an output name (X11 only).
    :geometry ; Geometry of the window.
    (
        geometry ; Geometry of the window.
        :anchor "top center" ; Values include top, center, bottom and left, center, right.
        :x "0" ; Position of the window. Values may be provided in px or %.
        :y "10" ; Will be relative to anchor.
        :height "2%" ; Values may be provided in px or %.
        :width "90%"
    )

    ; Wayland

    :stacking "bg" ; Possible values: fg, bg, overlay, bottom.
    :exclusive "true" ; Whether the compositor should reserve space for the window.
    :focusable "false" ; This is necessary for any widgets that use the keyboard to work.
    :class "bar"
    ;:namespace "??" ; Set the wayland layersurface namespace eww uses.
    (
        bar_wrapper
    )
)

(defwindow audio_menu 
    :monitor 2 ; Can be either a number (X11 and Wayland) or an output name (X11 only).
    :geometry ; Geometry of the window.
    (
        geometry ; Geometry of the window.
        :anchor "left center" ; Values include top, center, bottom and left, center, right.
        :x "0" ; Position of the window. Values may be provided in px or %.
        :y "10" ; Will be relative to anchor.
        :height "90%" ; Values may be provided in px or %.
        :width "2%"
    )

    ; Wayland

    :stacking "bg" ; Possible values: fg, bg, overlay, bottom.
    :exclusive "true" ; Whether the compositor should reserve space for the window.
    :focusable "false" ; This is necessary for any widgets that use the keyboard to work.
    :class "bar"
    ;:namespace "??" ; Set the wayland layersurface namespace eww uses.
    (
        bar_wrapper
    )
)

(defwidget bar_wrapper []
    (
        box
        (
            displaytime
        )
        (
            button
            :onclick "scripts/audio_window.sh"
        )
    )
)


(defpoll time :interval "1s"
        `date +'{
                    "day":"%d",
                    "month":"%m",
                    "year":"%y",
                    "hour":"%H",
                    "min":"%M", 
                    "sec":"%S"
                }'`
)

(defwidget displaytime []
    (
        box
        (
            label :text "${time.hour}:${time.min}:${time.sec}"
            :class "default_text"
            :halign "end"
        )
    )
)
